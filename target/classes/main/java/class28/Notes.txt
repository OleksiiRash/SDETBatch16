An exception in Java is an event that occurs during the execution of a
program that disrupts the normal flow of instructions. When an error occurs
within a method, the method creates an object and hands it off to the runtime
system. The object, called an exception object, contains information about the
error, including its type and the state of the program when the error occurred.

Types of errors:

Compile Time Errors:

    A compile-time error, or a syntax error, occurs when you write code
    that the compiler can't understand or is invalid. This type of error is
    usually detected by the compiler before the code is executed, so the code
    will not run until the errors are fixed.

Solution:

    We can fix these type of issues by learning the syntax of the language.
    Intellij can also help us fix these types of issues.

Logical issues/logical bugs:

    logical issues are when the code runs without errors, but doesn't give
    you the expected result. It means there is a problem with the underlying
    logic of the code

Solution:

    Debugger

Exceptions/Runtime errors:

The final block is useful for cleaning up resources such as
files or network connections, that should be closed no matter what happens
(whether there is an exception or not) in the try block. It ensures that the
block of code inside it is executed no matter what exceptions occur


Checked Exceptions:

Checked exceptions are exceptions that the compiler requires you to handle explicitly in your code.
When a method throws a checked exception, the method must either catch the exception using a
try-catch block or declare the exception using the throws keyword in its method signature.
Examples of checked exceptions include IOException, SQLException, and FileNotFoundException.
Checked exceptions are typically used for conditions that a well-behaved application should anticipate and handle.

Unchecked Exceptions:

Unchecked exceptions, also known as runtime exceptions, are exceptions
that do not need to be explicitly caught or declared.
The compiler does not enforce handling of unchecked exceptions.
Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, and IllegalArgumentException.
Unchecked exceptions are typically used to indicate programming errors,
such as accessing a null reference or accessing an array out of bounds.